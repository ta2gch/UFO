#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:quri :ufo :cl-gists) :silent t)

(defun url-body (url)
  (if (quri:uri-path url)
      (format nil "~a~a"
	      (quri:uri-host url)
	      (quri:uri-path url))
      (format nil "~a"
	      (quri:uri-host url))))
  
(defun build (ros out)
  (ros:roswell `("build" ,ros "-o" ,out)
	       :interactive nil))

(defun download (url dist)
  (ros:roswell `("roswell-internal-use" "download" ,url ,dist)
	       :interactive nil))

(defun install-http (url)
  (download (quri:render-uri url)
	    (merge-pathnames
	     (file-namestring (quri:uri-path url))
	     (ufo.env:dot-ufo #p"tmp/")))
  (build (merge-pathnames
	  (file-namestring (quri:uri-path url))
	  (ufo.env:dot-ufo #p"tmp/"))
	 (merge-pathnames
	  (pathname-name (quri:uri-path url))
	  (ufo.env:dot-ufo #p"addon/"))))

(defun install-https (url)
  (install-http url))

(defun install-file (url)
  (build  (url-body url)
	  (merge-pathnames
	   (pathname-name (url-body url))
	   (ufo.env:dot-ufo #p"addon/"))))

(defun install-gist (url)
  (let ((username (quri:uri-host url))
	(filename (file-namestring (quri:uri-path url))))
    (dolist (gist (cl-gists:list-gists :username username))
      (dolist (file (cl-gists:gist-files gist))
	(when (string= (cl-gists:file-name file) filename)
	  (install-https (quri:uri (cl-gists:file-raw-url file)))
	  (return-from install-gist nil))))
    (error "not found~%")))

(defun main (&rest argv)
  (declare (ignorable argv))
  (dolist (url (mapcar #'quri:uri argv))
    (cond
      ((string= (quri:uri-scheme url) "gist")
       (install-gist url))
      ((string= (quri:uri-scheme url) "file")
       (install-file url))
      ((string= (quri:uri-scheme url) "http")
       (install-http url))
      ((string= (quri:uri-scheme url) "https")
       (install-https url))
      (t (error "unkown scheme~%")))))
